---
alwaysApply: false
---
# 火灾应急救援RAG系统 - 完整项目提示词

## 项目概述

**项目名称**: Fire Emergency RAG System (火灾应急救援RAG系统)
**项目类型**: 基于知识图谱和RAG技术的智能应急响应系统
**核心功能**: 接收用户手动输入的物品和环境信息，通过知识图谱检索和RAG技术生成火灾救援方案

## 技术栈选型

### 后端技术栈
- **主框架**: FastAPI 0.104+ (Python 3.9+)
- **图数据库**: Neo4j 5.15+ (知识图谱存储)
- **关系数据库**: PostgreSQL 15+ (元数据管理)
- **向量数据库**: ChromaDB 0.4+ (RAG检索)
- **大语言模型**: Ollama (本地部署，支持qwen2.5/llama3.1)
- **缓存系统**: Redis 7+ (会话和缓存管理)
- **消息队列**: Celery + Redis (异步任务处理)
- **API文档**: Swagger/OpenAPI 3.0
- **认证授权**: JWT + OAuth2
- **日志系统**: Loguru + ELK Stack
- **监控系统**: Prometheus + Grafana

### 前端技术栈
- **主框架**: Next.js 14+ (App Router)
- **开发语言**: TypeScript 5.0+
- **样式框架**: Tailwind CSS 3.4+ + Headless UI
- **状态管理**: Zustand + React Query
- **图表可视化**: D3.js + React D3 Tree
- **表单处理**: React Hook Form + Zod
- **UI组件**: Radix UI + Lucide React
- **数据获取**: Axios + SWR
- **构建工具**: Turbopack (开发) + Webpack (生产)
- **代码质量**: ESLint + Prettier + Husky

### 部署技术栈
- **容器化**: Docker + Docker Compose
- **反向代理**: Nginx 1.24+
- **进程管理**: PM2 (生产环境)
- **CI/CD**: GitHub Actions
- **监控告警**: Prometheus + Grafana + AlertManager
- **日志收集**: Filebeat + Logstash + Elasticsearch + Kibana
- **备份策略**: PostgreSQL备份 + Neo4j备份 + 文件备份

## 系统架构设计

### 整体架构

用户输入服务 → 应急服务模块 → 知识图谱服务(Neo4j)
                    ↓
                RAG服务(ChromaDB) → Ollama服务
                    ↓
                缓存服务(Redis) → 前端界面
                    ↑
                管理服务模块
```
┌─────────────────────────────────────────────────────────────┐
│                    前端层 (Next.js 14)                      │
├─────────────────────────────────────────────────────────────┤
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐         │
│  │   应急输入   │  │  知识图谱    │  │  救援方案    │         │
│  │   界面      │  │   可视化     │  │   展示      │         │
│  └─────────────┘  └─────────────┘  └─────────────┘         │
└─────────────────────────────────────────────────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────┐
│                    API网关层 (Nginx)                        │
├─────────────────────────────────────────────────────────────┤
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐         │
│  │   负载均衡   │  │   SSL终止    │  │   限流熔断   │         │
│  │   路由      │  │   认证      │  │   监控      │         │
│  └─────────────┘  └─────────────┘  └─────────────┘         │
└─────────────────────────────────────────────────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────┐
│                   应用服务层 (FastAPI)                       │
├─────────────────────────────────────────────────────────────┤
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐         │
│  │   应急服务   │  │  知识图谱    │  │   RAG服务   │         │
│  │   模块      │  │   服务      │  │   模块      │         │
│  └─────────────┘  └─────────────┘  └─────────────┘         │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐         │
│  │   Ollama    │  │   缓存服务   │  │   用户服务   │         │
│  │   服务      │  │   模块      │  │   模块      │         │
│  └─────────────┘  └─────────────┘  └─────────────┘         │
└─────────────────────────────────────────────────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────┐
│                    数据存储层                               │
├─────────────────────────────────────────────────────────────┤
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐         │
│  │   Neo4j     │  │ PostgreSQL  │  │  ChromaDB   │         │
│  │  (图数据)   │  │  (关系数据)  │  │  (向量数据)  │         │
│  └─────────────┘  └─────────────┘  └─────────────┘         │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐         │
│  │   Redis     │  │   文件存储   │  │   日志存储   │         │
│  │  (缓存)     │  │  (MinIO)    │  │  (ELK)      │         │
│  └─────────────┘  └─────────────┘  └─────────────┘         │
└─────────────────────────────────────────────────────────────┘
```

### 数据流架构
```
用户手动输入 → 物品列表+环境 → API接口 → 知识图谱检索 → RAG增强 → Ollama生成 → 救援方案
```

## 项目结构安排

### 根目录结构
```
fire-emergency-rag/
├── .github/                    # GitHub Actions配置
│   └── workflows/
│       ├── ci.yml             # 持续集成
│       ├── cd.yml             # 持续部署
│       └── security.yml       # 安全扫描
├── .cursor/                    # Cursor IDE配置
│   └── rules/
│       └── project.mdc        # 项目规则
├── backend/                    # 后端服务
├── frontend/                   # 前端应用
├── infrastructure/             # 基础设施配置
│   ├── docker/                # Docker配置
│   ├── kubernetes/            # K8s配置
│   ├── terraform/             # 基础设施即代码
│   └── monitoring/            # 监控配置
├── docs/                      # 项目文档
│   ├── api/                   # API文档
│   ├── architecture/          # 架构文档
│   ├── deployment/            # 部署文档
│   └── user-guide/            # 用户指南
├── scripts/                   # 脚本文件
│   ├── setup/                 # 环境设置
│   ├── migration/             # 数据迁移
│   └── backup/                # 备份脚本
├── tests/                     # 测试文件
│   ├── unit/                  # 单元测试
│   ├── integration/           # 集成测试
│   └── e2e/                   # 端到端测试
├── data/                      # 数据文件
│   ├── knowledge_base/        # 知识库数据
│   ├── embeddings/            # 向量嵌入
│   └── samples/               # 示例数据
├── docker-compose.yml         # 开发环境
├── docker-compose.prod.yml    # 生产环境
├── .env.example              # 环境变量示例
├── .gitignore                # Git忽略文件
├── README.md                 # 项目说明
└── LICENSE                   # 许可证
```

## 核心模块定义

### 1. 应急服务模块 (Emergency Service)
**职责**: 处理应急输入，协调各服务生成救援方案
**核心功能**:
- 接收用户手动输入的物品和环境信息
- 验证和标准化输入数据
- 调用知识图谱服务检索相关知识
- 调用RAG服务增强上下文
- 调用Ollama服务生成救援方案
- 缓存和优化响应性能

**API接口**:
```python
POST /api/v1/emergency/rescue-plan
GET /api/v1/emergency/plans/{plan_id}
PUT /api/v1/emergency/plans/{plan_id}
DELETE /api/v1/emergency/plans/{plan_id}
```

**输入数据模型**:
```python
class RescuePlanRequest(BaseModel):
    items: List[Item]
    environment: Environment
    additional_info: Optional[str] = None

class Item(BaseModel):
    name: str                    # 物品名称
    material: str               # 材质
    quantity: int               # 数量
    location: str               # 位置
    condition: Optional[str] = None    # 状态
    flammability: Optional[str] = None # 易燃性
    toxicity: Optional[str] = None     # 毒性

class Environment(BaseModel):
    type: str                   # 环境类型（室内/室外）
    area: str                   # 区域（住宅/商业/工业）
    floor: Optional[int] = None # 楼层
    ventilation: str            # 通风情况
    exits: int                  # 出口数量
    occupancy: Optional[int] = None # 人员数量
```

### 2. 知识图谱服务模块 (Knowledge Graph Service)
**职责**: 管理Neo4j图数据库，提供知识检索和推理
**核心功能**:
- 物品节点管理（椅子、桌子、冰箱等）
- 材质属性管理（木质、金属、塑料等）
- 环境场景管理（室内、草原、森林等）
- 救援方案节点管理
- 复杂关系查询和推理
- 知识图谱可视化数据提供

**数据模型**:
```cypher
// 物品节点
CREATE (item:Item {
    id: "item_001",
    name: "椅子",
    type: "家具",
    material: "木质",
    flammability: "易燃",
    toxicity: "低"
})

// 环境节点
CREATE (env:Environment {
    id: "env_001",
    name: "室内",
    type: "建筑",
    fire_characteristics: "烟雾扩散快"
})

// 救援方案节点
CREATE (plan:RescuePlan {
    id: "plan_001",
    name: "木质家具防火",
    priority: "高",
    steps: ["立即疏散", "切断电源", "湿布覆盖"]
})
```

### 3. RAG服务模块 (RAG Service)
**职责**: 基于ChromaDB的向量检索和文档增强
**核心功能**:
- 文档向量化和存储
- 语义相似度检索
- 上下文增强和排序
- 多模态检索支持
- 检索结果优化和过滤

### 4. Ollama服务模块 (Ollama Service)
**职责**: 集成本地大语言模型，生成救援方案
**核心功能**:
- 模型管理和切换
- 提示词模板管理
- 流式响应处理
- 模型性能监控
- 错误处理和重试

### 5. 缓存服务模块 (Cache Service)
**职责**: 提供高性能缓存，优化系统响应速度
**核心功能**:
- Redis缓存管理
- 缓存策略制定
- 缓存失效处理
- 分布式缓存同步
- 缓存性能监控

### 6. 用户服务模块 (User Service)
**职责**: 用户认证、授权和权限管理
**核心功能**:
- JWT令牌管理
- 用户注册和登录
- 角色权限控制
- 会话管理
- 审计日志记录

### 7. 管理服务模块 (Admin Service)
**职责**: 系统管理和维护功能
**核心功能**:
- 知识图谱数据管理
- 用户管理
- 系统监控
- 日志查看
- 配置管理

### 8. 用户输入服务模块 (User Input Service)
**职责**: 处理用户手动输入的数据，提供友好的输入界面
**核心功能**:
- 提供物品信息输入表单
- 提供环境信息选择器
- 数据格式验证和标准化
- 输入历史记录管理
- 输入模板和预设管理

## 性能指标

### 响应时间要求
- API响应时间: < 500ms (95%请求)
- 救援方案生成: < 3s
- 知识图谱查询: < 200ms
- 向量检索: < 100ms

### 并发性能
- 支持并发用户: 1000+
- 峰值QPS: 5000+
- 数据库连接池: 100+
- 缓存命中率: > 90%

### 可用性要求
- 系统可用性: 99.9%
- 故障恢复时间: < 5分钟
- 数据备份频率: 每日
- 监控告警响应: < 1分钟

## 安全设计

### 1. 认证授权
- JWT令牌认证
- 基于角色的访问控制(RBAC)
- API密钥管理
- 会话超时控制
- 用户输入数据验证和过滤

### 2. 数据安全
- 敏感数据加密存储
- 传输层SSL/TLS加密
- 数据库连接加密
- 定期安全扫描

### 3. 系统安全
- 用户输入数据验证和过滤
- SQL注入防护
- XSS攻击防护
- CSRF保护
- 输入数据格式严格验证
- 恶意输入检测和防护

## 开发规范

### 1. 代码规范
- Python: PEP 8 + Black格式化
- TypeScript: ESLint + Prettier
- 提交信息: Conventional Commits
- 代码审查: Pull Request必需

### 2. 测试规范
- 单元测试覆盖率: > 80%
- 集成测试: 关键流程覆盖
- 端到端测试: 用户场景覆盖
- 性能测试: 压力测试和负载测试

### 3. 文档规范
- API文档: OpenAPI 3.0标准
- 代码文档: 函数和类注释
- 架构文档: 系统设计说明
- 用户文档: 操作指南和FAQ

## 部署策略

### 1. 开发环境
- Docker Compose本地部署
- 热重载开发
- 调试工具集成
- 测试数据管理

### 2. 测试环境
- 容器化部署
- 自动化测试
- 性能测试
- 安全测试

### 3. 生产环境
- Kubernetes集群部署
- 负载均衡配置
- 自动扩缩容
- 蓝绿部署策略

## 扩展性设计

### 1. 水平扩展
- 无状态服务设计
- 数据库读写分离
- 缓存集群部署
- 负载均衡配置

### 2. 功能扩展
- 插件化架构
- 微服务拆分
- API版本管理
- 向后兼容性

### 3. 数据扩展
- 分库分表策略
- 数据归档方案
- 备份恢复机制
- 数据迁移工具

---

**注意**: 这是一个完整的项目提示词文档，包含了技术栈选型、架构设计、项目结构、模块定义等所有必要信息。开发团队可以基于此文档进行系统设计和开发实施。