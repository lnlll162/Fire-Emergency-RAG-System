---
alwaysApply: false
---
# 用户输入服务模块 - 开发提示词

## 模块概述
用户输入服务模块负责处理用户手动输入的数据，提供友好的输入界面、数据验证和标准化、输入历史记录管理、模板和预设管理等功能，确保用户能够高效准确地输入救援场景信息。

## 技术栈
- **前端框架**: Next.js 14 + TypeScript
- **表单处理**: React Hook Form + Zod
- **UI组件**: Radix UI + Tailwind CSS
- **状态管理**: Zustand
- **数据验证**: Zod + Joi
- **本地存储**: localStorage + IndexedDB

## 核心职责
1. 提供物品信息输入表单
2. 提供环境信息选择器
3. 数据格式验证和标准化
4. 输入历史记录管理
5. 输入模板和预设管理
6. 用户输入体验优化

## 数据模型定义

### 输入表单模型
```typescript
import { z } from 'zod';

// 物品信息验证模式
export const ItemSchema = z.object({
  name: z.string()
    .min(1, '物品名称不能为空')
    .max(100, '物品名称不能超过100个字符')
    .regex(/^[\u4e00-\u9fff\w\s-]+$/, '物品名称只能包含中文、英文、数字、空格和连字符'),
  material: z.string()
    .min(1, '材质不能为空')
    .max(50, '材质不能超过50个字符'),
  quantity: z.number()
    .int('数量必须是整数')
    .min(1, '数量必须大于0')
    .max(1000, '数量不能超过1000'),
  location: z.string()
    .min(1, '位置不能为空')
    .max(100, '位置不能超过100个字符'),
  condition: z.string()
    .max(50, '状态不能超过50个字符')
    .optional(),
  flammability: z.enum(['不燃', '难燃', '易燃', '极易燃'])
    .optional(),
  toxicity: z.enum(['无毒', '低毒', '中毒', '高毒', '剧毒'])
    .optional(),
  size: z.object({
    length: z.number().min(0).optional(),
    width: z.number().min(0).optional(),
    height: z.number().min(0).optional(),
    unit: z.enum(['cm', 'm']).default('cm')
  }).optional(),
  weight: z.object({
    value: z.number().min(0).optional(),
    unit: z.enum(['kg', 'g', 't']).default('kg')
  }).optional()
});

// 环境信息验证模式
export const EnvironmentSchema = z.object({
  type: z.enum(['室内', '室外', '半室外'], {
    errorMap: () => ({ message: '请选择环境类型' })
  }),
  area: z.enum(['住宅', '商业', '工业', '公共建筑', '交通工具', '其他'], {
    errorMap: () => ({ message: '请选择区域类型' })
  }),
  floor: z.number()
    .int('楼层必须是整数')
    .min(-10, '楼层不能低于-10层')
    .max(200, '楼层不能超过200层')
    .optional(),
  ventilation: z.enum(['良好', '一般', '较差', '很差'], {
    errorMap: () => ({ message: '请选择通风情况' })
  }),
  exits: z.number()
    .int('出口数量必须是整数')
    .min(1, '出口数量至少为1')
    .max(20, '出口数量不能超过20'),
  occupancy: z.number()
    .int('人员数量必须是整数')
    .min(0, '人员数量不能为负数')
    .max(10000, '人员数量不能超过10000')
    .optional(),
  building_type: z.enum(['砖混', '钢结构', '木结构', '其他'])
    .optional(),
  fire_safety_equipment: z.array(z.enum([
    '灭火器', '消防栓', '自动喷淋', '烟雾报警器', '应急照明', '疏散指示'
  ])).optional(),
  special_conditions: z.string()
    .max(500, '特殊条件不能超过500个字符')
    .optional()
});

// 救援方案请求验证模式
export const RescuePlanRequestSchema = z.object({
  items: z.array(ItemSchema)
    .min(1, '至少需要输入一个物品')
    .max(50, '物品数量不能超过50个'),
  environment: EnvironmentSchema,
  additional_info: z.string()
    .max(1000, '附加信息不能超过1000个字符')
    .optional(),
  urgency_level: z.enum(['低', '中', '高', '紧急'])
    .default('中'),
  contact_info: z.object({
    name: z.string().max(100).optional(),
    phone: z.string().regex(/^1[3-9]\d{9}$/, '请输入有效的手机号码').optional(),
    email: z.string().email('请输入有效的邮箱地址').optional()
  }).optional()
});

// TypeScript类型定义
export type Item = z.infer<typeof ItemSchema>;
export type Environment = z.infer<typeof EnvironmentSchema>;
export type RescuePlanRequest = z.infer<typeof RescuePlanRequestSchema>;
```

### 输入历史模型
```typescript
export interface InputHistory {
  id: string;
  timestamp: Date;
  request: RescuePlanRequest;
  result?: {
    planId: string;
    title: string;
    priority: string;
  };
  user_id?: string;
  session_id: string;
}

export interface InputTemplate {
  id: string;
  name: string;
  description: string;
  category: 'common' | 'emergency' | 'custom';
  items: Item[];
  environment: Environment;
  created_at: Date;
  updated_at: Date;
  usage_count: number;
  is_public: boolean;
  created_by?: string;
}

export interface InputPreset {
  id: string;
  name: string;
  type: 'item' | 'environment' | 'combination';
  data: Partial<Item> | Partial<Environment> | Partial<RescuePlanRequest>;
  category: string;
  tags: string[];
  created_at: Date;
  usage_count: number;
}
```

## 组件设计

### 物品输入表单组件
```typescript
import React from 'react';
import { useForm, useFieldArray } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Plus, Trash2, Copy } from 'lucide-react';

interface ItemInputFormProps {
  onSubmit: (data: RescuePlanRequest) => void;
  initialData?: Partial<RescuePlanRequest>;
  isLoading?: boolean;
}

export const ItemInputForm: React.FC<ItemInputFormProps> = ({
  onSubmit,
  initialData,
  isLoading = false
}) => {
  const {
    register,
    control,
    handleSubmit,
    formState: { errors, isValid },
    watch,
    setValue
  } = useForm<RescuePlanRequest>({
    resolver: zodResolver(RescuePlanRequestSchema),
    defaultValues: initialData || {
      items: [{ name: '', material: '', quantity: 1, location: '' }],
      environment: {
        type: '室内',
        area: '住宅',
        ventilation: '良好',
        exits: 1
      },
      urgency_level: '中'
    }
  });

  const { fields, append, remove, duplicate } = useFieldArray({
    control,
    name: 'items'
  });

  const handleAddItem = () => {
    append({
      name: '',
      material: '',
      quantity: 1,
      location: ''
    });
  };

  const handleDuplicateItem = (index: number) => {
    const item = fields[index];
    append(item);
  };

  const handleRemoveItem = (index: number) => {
    if (fields.length > 1) {
      remove(index);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      {/* 物品列表 */}
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold">物品信息</h3>
          <button
            type="button"
            onClick={handleAddItem}
            className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            <Plus className="w-4 h-4" />
            添加物品
          </button>
        </div>

        {fields.map((field, index) => (
          <div key={field.id} className="border rounded-lg p-4 space-y-4">
            <div className="flex items-center justify-between">
              <h4 className="font-medium">物品 {index + 1}</h4>
              <div className="flex gap-2">
                <button
                  type="button"
                  onClick={() => handleDuplicateItem(index)}
                  className="p-2 text-gray-600 hover:text-blue-600"
                >
                  <Copy className="w-4 h-4" />
                </button>
                {fields.length > 1 && (
                  <button
                    type="button"
                    onClick={() => handleRemoveItem(index)}
                    className="p-2 text-gray-600 hover:text-red-600"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                )}
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">
                  物品名称 *
                </label>
                <input
                  {...register(`items.${index}.name`)}
                  className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
                  placeholder="例如：椅子、桌子、冰箱"
                />
                {errors.items?.[index]?.name && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.items[index]?.name?.message}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  材质 *
                </label>
                <select
                  {...register(`items.${index}.material`)}
                  className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">请选择材质</option>
                  <option value="木质">木质</option>
                  <option value="金属">金属</option>
                  <option value="塑料">塑料</option>
                  <option value="玻璃">玻璃</option>
                  <option value="陶瓷">陶瓷</option>
                  <option value="布料">布料</option>
                  <option value="皮革">皮革</option>
                  <option value="其他">其他</option>
                </select>
                {errors.items?.[index]?.material && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.items[index]?.material?.message}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  数量 *
                </label>
                <input
                  type="number"
                  {...register(`items.${index}.quantity`, { valueAsNumber: true })}
                  className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
                  min="1"
                  max="1000"
                />
                {errors.items?.[index]?.quantity && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.items[index]?.quantity?.message}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  位置 *
                </label>
                <input
                  {...register(`items.${index}.location`)}
                  className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
                  placeholder="例如：客厅、卧室、厨房"
                />
                {errors.items?.[index]?.location && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.items[index]?.location?.message}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  易燃性
                </label>
                <select
                  {...register(`items.${index}.flammability`)}
                  className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">请选择</option>
                  <option value="不燃">不燃</option>
                  <option value="难燃">难燃</option>
                  <option value="易燃">易燃</option>
                  <option value="极易燃">极易燃</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  毒性
                </label>
                <select
                  {...register(`items.${index}.toxicity`)}
                  className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">请选择</option>
                  <option value="无毒">无毒</option>
                  <option value="低毒">低毒</option>
                  <option value="中毒">中毒</option>
                  <option value="高毒">高毒</option>
                  <option value="剧毒">剧毒</option>
                </select>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* 环境信息 */}
      <EnvironmentInputSection register={register} errors={errors} />

      {/* 附加信息 */}
      <div>
        <label className="block text-sm font-medium mb-1">
          附加信息
        </label>
        <textarea
          {...register('additional_info')}
          className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
          rows={3}
          placeholder="请描述任何其他重要信息..."
        />
        {errors.additional_info && (
          <p className="text-red-500 text-sm mt-1">
            {errors.additional_info.message}
          </p>
        )}
      </div>

      {/* 提交按钮 */}
      <div className="flex justify-end">
        <button
          type="submit"
          disabled={!isValid || isLoading}
          className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isLoading ? '生成中...' : '生成救援方案'}
        </button>
      </div>
    </form>
  );
};
```

### 环境输入组件
```typescript
interface EnvironmentInputSectionProps {
  register: any;
  errors: any;
}

export const EnvironmentInputSection: React.FC<EnvironmentInputSectionProps> = ({
  register,
  errors
}) => {
  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">环境信息</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium mb-1">
            环境类型 *
          </label>
          <select
            {...register('environment.type')}
            className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
          >
            <option value="">请选择环境类型</option>
            <option value="室内">室内</option>
            <option value="室外">室外</option>
            <option value="半室外">半室外</option>
          </select>
          {errors.environment?.type && (
            <p className="text-red-500 text-sm mt-1">
              {errors.environment.type.message}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            区域类型 *
          </label>
          <select
            {...register('environment.area')}
            className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
          >
            <option value="">请选择区域类型</option>
            <option value="住宅">住宅</option>
            <option value="商业">商业</option>
            <option value="工业">工业</option>
            <option value="公共建筑">公共建筑</option>
            <option value="交通工具">交通工具</option>
            <option value="其他">其他</option>
          </select>
          {errors.environment?.area && (
            <p className="text-red-500 text-sm mt-1">
              {errors.environment.area.message}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            楼层
          </label>
          <input
            type="number"
            {...register('environment.floor', { valueAsNumber: true })}
            className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
            placeholder="例如：3"
          />
          {errors.environment?.floor && (
            <p className="text-red-500 text-sm mt-1">
              {errors.environment.floor.message}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            通风情况 *
          </label>
          <select
            {...register('environment.ventilation')}
            className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
          >
            <option value="">请选择通风情况</option>
            <option value="良好">良好</option>
            <option value="一般">一般</option>
            <option value="较差">较差</option>
            <option value="很差">很差</option>
          </select>
          {errors.environment?.ventilation && (
            <p className="text-red-500 text-sm mt-1">
              {errors.environment.ventilation.message}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            出口数量 *
          </label>
          <input
            type="number"
            {...register('environment.exits', { valueAsNumber: true })}
            className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
            min="1"
            max="20"
          />
          {errors.environment?.exits && (
            <p className="text-red-500 text-sm mt-1">
              {errors.environment.exits.message}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            人员数量
          </label>
          <input
            type="number"
            {...register('environment.occupancy', { valueAsNumber: true })}
            className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
            min="0"
            max="10000"
          />
          {errors.environment?.occupancy && (
            <p className="text-red-500 text-sm mt-1">
              {errors.environment.occupancy.message}
            </p>
          )}
        </div>
      </div>
    </div>
  );
};
```

## 状态管理

### 输入状态管理
```typescript
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

interface InputState {
  // 当前输入数据
  currentInput: Partial<RescuePlanRequest>;
  
  // 输入历史
  inputHistory: InputHistory[];
  
  // 输入模板
  templates: InputTemplate[];
  
  // 输入预设
  presets: InputPreset[];
  
  // 当前会话
  currentSession: string;
  
  // 操作
  setCurrentInput: (input: Partial<RescuePlanRequest>) => void;
  addToHistory: (history: InputHistory) => void;
  saveTemplate: (template: Omit<InputTemplate, 'id' | 'created_at' | 'updated_at'>) => void;
  loadTemplate: (templateId: string) => void;
  deleteTemplate: (templateId: string) => void;
  savePreset: (preset: Omit<InputPreset, 'id' | 'created_at'>) => void;
  loadPreset: (presetId: string) => void;
  clearHistory: () => void;
  exportData: () => string;
  importData: (data: string) => void;
}

export const useInputStore = create<InputState>()(
  persist(
    (set, get) => ({
      currentInput: {},
      inputHistory: [],
      templates: [],
      presets: [],
      currentSession: '',

      setCurrentInput: (input) => {
        set({ currentInput: input });
      },

      addToHistory: (history) => {
        set((state) => ({
          inputHistory: [history, ...state.inputHistory].slice(0, 100) // 保留最近100条
        }));
      },

      saveTemplate: (templateData) => {
        const template: InputTemplate = {
          ...templateData,
          id: crypto.randomUUID(),
          created_at: new Date(),
          updated_at: new Date(),
          usage_count: 0
        };
        
        set((state) => ({
          templates: [...state.templates, template]
        }));
      },

      loadTemplate: (templateId) => {
        const template = get().templates.find(t => t.id === templateId);
        if (template) {
          set({ currentInput: template });
        }
      },

      deleteTemplate: (templateId) => {
        set((state) => ({
          templates: state.templates.filter(t => t.id !== templateId)
        }));
      },

      savePreset: (presetData) => {
        const preset: InputPreset = {
          ...presetData,
          id: crypto.randomUUID(),
          created_at: new Date(),
          usage_count: 0
        };
        
        set((state) => ({
          presets: [...state.presets, preset]
        }));
      },

      loadPreset: (presetId) => {
        const preset = get().presets.find(p => p.id === presetId);
        if (preset) {
          // 根据预设类型加载到相应字段
          set((state) => ({
            currentInput: {
              ...state.currentInput,
              ...preset.data
            }
          }));
        }
      },

      clearHistory: () => {
        set({ inputHistory: [] });
      },

      exportData: () => {
        const state = get();
        return JSON.stringify({
          history: state.inputHistory,
          templates: state.templates,
          presets: state.presets
        });
      },

      importData: (data) => {
        try {
          const imported = JSON.parse(data);
          set({
            inputHistory: imported.history || [],
            templates: imported.templates || [],
            presets: imported.presets || []
          });
        } catch (error) {
          console.error('导入数据失败:', error);
        }
      }
    }),
    {
      name: 'input-storage',
      partialize: (state) => ({
        inputHistory: state.inputHistory,
        templates: state.templates,
        presets: state.presets
      })
    }
  )
);
```

## 数据验证服务

### 验证服务类
```typescript
export class InputValidationService {
  static validateItem(item: Partial<Item>): ValidationResult {
    try {
      ItemSchema.parse(item);
      return { isValid: true, errors: [] };
    } catch (error) {
      if (error instanceof z.ZodError) {
        return {
          isValid: false,
          errors: error.errors.map(err => ({
            field: err.path.join('.'),
            message: err.message
          }))
        };
      }
      return { isValid: false, errors: [{ field: 'unknown', message: '验证失败' }] };
    }
  }

  static validateEnvironment(environment: Partial<Environment>): ValidationResult {
    try {
      EnvironmentSchema.parse(environment);
      return { isValid: true, errors: [] };
    } catch (error) {
      if (error instanceof z.ZodError) {
        return {
          isValid: false,
          errors: error.errors.map(err => ({
            field: err.path.join('.'),
            message: err.message
          }))
        };
      }
      return { isValid: false, errors: [{ field: 'unknown', message: '验证失败' }] };
    }
  }

  static validateRescuePlanRequest(request: Partial<RescuePlanRequest>): ValidationResult {
    try {
      RescuePlanRequestSchema.parse(request);
      return { isValid: true, errors: [] };
    } catch (error) {
      if (error instanceof z.ZodError) {
        return {
          isValid: false,
          errors: error.errors.map(err => ({
            field: err.path.join('.'),
            message: err.message
          }))
        };
      }
      return { isValid: false, errors: [{ field: 'unknown', message: '验证失败' }] };
    }
  }

  static sanitizeInput(input: any): any {
    // 清理和标准化输入数据
    if (typeof input === 'string') {
      return input.trim().replace(/[<>]/g, '');
    }
    if (Array.isArray(input)) {
      return input.map(item => this.sanitizeInput(item));
    }
    if (typeof input === 'object' && input !== null) {
      const sanitized: any = {};
      for (const [key, value] of Object.entries(input)) {
        sanitized[key] = this.sanitizeInput(value);
      }
      return sanitized;
    }
    return input;
  }
}

interface ValidationResult {
  isValid: boolean;
  errors: Array<{
    field: string;
    message: string;
  }>;
}
```

## 模板管理服务

### 模板服务类
```typescript
export class TemplateService {
  static getCommonTemplates(): InputTemplate[] {
    return [
      {
        id: 'common-living-room',
        name: '客厅火灾',
        description: '客厅常见物品火灾场景',
        category: 'common',
        items: [
          { name: '沙发', material: '布艺', quantity: 1, location: '客厅' },
          { name: '茶几', material: '木质', quantity: 1, location: '客厅' },
          { name: '电视', material: '塑料', quantity: 1, location: '客厅' }
        ],
        environment: {
          type: '室内',
          area: '住宅',
          ventilation: '良好',
          exits: 2
        },
        created_at: new Date(),
        updated_at: new Date(),
        usage_count: 0,
        is_public: true
      },
      {
        id: 'common-kitchen',
        name: '厨房火灾',
        description: '厨房火灾场景',
        category: 'common',
        items: [
          { name: '燃气灶', material: '金属', quantity: 1, location: '厨房' },
          { name: '冰箱', material: '金属', quantity: 1, location: '厨房' },
          { name: '橱柜', material: '木质', quantity: 1, location: '厨房' }
        ],
        environment: {
          type: '室内',
          area: '住宅',
          ventilation: '一般',
          exits: 1
        },
        created_at: new Date(),
        updated_at: new Date(),
        usage_count: 0,
        is_public: true
      }
    ];
  }

  static getEmergencyTemplates(): InputTemplate[] {
    return [
      {
        id: 'emergency-chemical',
        name: '化学品火灾',
        description: '化学品泄漏引发的火灾',
        category: 'emergency',
        items: [
          { name: '化学容器', material: '塑料', quantity: 1, location: '实验室', toxicity: '高毒' },
          { name: '实验台', material: '金属', quantity: 1, location: '实验室' }
        ],
        environment: {
          type: '室内',
          area: '工业',
          ventilation: '较差',
          exits: 2,
          special_conditions: '化学品泄漏，需要特殊防护'
        },
        created_at: new Date(),
        updated_at: new Date(),
        usage_count: 0,
        is_public: true
      }
    ];
  }

  static createTemplateFromHistory(history: InputHistory): InputTemplate {
    return {
      id: crypto.randomUUID(),
      name: `模板_${new Date().toLocaleDateString()}`,
      description: '从历史记录创建的模板',
      category: 'custom',
      items: history.request.items,
      environment: history.request.environment,
      created_at: new Date(),
      updated_at: new Date(),
      usage_count: 0,
      is_public: false,
      created_by: history.user_id
    };
  }
}
```

## 性能优化

### 1. 表单性能优化
```typescript
import { useMemo, useCallback } from 'react';

export const useOptimizedForm = () => {
  const form = useForm<RescuePlanRequest>({
    resolver: zodResolver(RescuePlanRequestSchema),
    mode: 'onChange'
  });

  // 防抖验证
  const debouncedValidate = useMemo(
    () => debounce(form.trigger, 300),
    [form.trigger]
  );

  // 优化的字段更新
  const updateField = useCallback(
    (path: string, value: any) => {
      form.setValue(path as any, value, { shouldValidate: true });
      debouncedValidate();
    },
    [form.setValue, debouncedValidate]
  );

  return { form, updateField };
};

// 防抖函数
function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout;
  return (...args: Parameters<T>) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
}
```

### 2. 本地存储优化
```typescript
export class LocalStorageService {
  private static readonly STORAGE_KEYS = {
    INPUT_HISTORY: 'input_history',
    TEMPLATES: 'input_templates',
    PRESETS: 'input_presets',
    USER_PREFERENCES: 'user_preferences'
  };

  static saveToStorage<T>(key: string, data: T): void {
    try {
      const serialized = JSON.stringify(data);
      localStorage.setItem(key, serialized);
    } catch (error) {
      console.error('保存到本地存储失败:', error);
    }
  }

  static loadFromStorage<T>(key: string, defaultValue: T): T {
    try {
      const item = localStorage.getItem(key);
      return item ? JSON.parse(item) : defaultValue;
    } catch (error) {
      console.error('从本地存储加载失败:', error);
      return defaultValue;
    }
  }

  static clearStorage(): void {
    Object.values(this.STORAGE_KEYS).forEach(key => {
      localStorage.removeItem(key);
    });
  }

  static getStorageSize(): number {
    let total = 0;
    for (let key in localStorage) {
      if (localStorage.hasOwnProperty(key)) {
        total += localStorage[key].length;
      }
    }
    return total;
  }
}
```

## 测试要求

### 单元测试
```typescript
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { ItemInputForm } from './ItemInputForm';

describe('ItemInputForm', () => {
  test('renders form with initial item', () => {
    render(<ItemInputForm onSubmit={jest.fn()} />);
    
    expect(screen.getByLabelText(/物品名称/)).toBeInTheDocument();
    expect(screen.getByLabelText(/材质/)).toBeInTheDocument();
    expect(screen.getByLabelText(/数量/)).toBeInTheDocument();
    expect(screen.getByLabelText(/位置/)).toBeInTheDocument();
  });

  test('validates required fields', async () => {
    const onSubmit = jest.fn();
    render(<ItemInputForm onSubmit={onSubmit} />);
    
    const submitButton = screen.getByRole('button', { name: /生成救援方案/ });
    fireEvent.click(submitButton);
    
    await waitFor(() => {
      expect(screen.getByText(/物品名称不能为空/)).toBeInTheDocument();
    });
    
    expect(onSubmit).not.toHaveBeenCalled();
  });

  test('adds new item when add button is clicked', () => {
    render(<ItemInputForm onSubmit={jest.fn()} />);
    
    const addButton = screen.getByRole('button', { name: /添加物品/ });
    fireEvent.click(addButton);
    
    expect(screen.getAllByText(/物品 \d+/)).toHaveLength(2);
  });

  test('removes item when remove button is clicked', () => {
    render(<ItemInputForm onSubmit={jest.fn()} />);
    
    const addButton = screen.getByRole('button', { name: /添加物品/ });
    fireEvent.click(addButton);
    
    const removeButton = screen.getAllByRole('button', { name: /删除/ })[0];
    fireEvent.click(removeButton);
    
    expect(screen.getAllByText(/物品 \d+/)).toHaveLength(1);
  });
});
```

## 部署配置

### 环境变量
```bash
# 前端配置
NEXT_PUBLIC_API_BASE_URL=http://localhost:8000
NEXT_PUBLIC_APP_NAME=火灾应急救援RAG系统
NEXT_PUBLIC_MAX_ITEMS=50
NEXT_PUBLIC_MAX_HISTORY=100

# 验证配置
VALIDATION_STRICT_MODE=true
VALIDATION_DEBOUNCE_MS=300
MAX_INPUT_LENGTH=1000

# 存储配置
LOCAL_STORAGE_ENABLED=true
INDEXED_DB_ENABLED=true
STORAGE_QUOTA_MB=10
```

这个提示词文件提供了用户输入服务模块的完整开发指南，包括表单设计、数据验证、状态管理、模板管理、性能优化等各个方面，确保开发人员能够顺利实现该模块。